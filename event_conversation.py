import copy
import re
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler, ConversationHandler
import time
from datetime import datetime, timedelta
import swagger_DB_ui as SWG

dev_chat_id = 0
form_commands = []
ordinary_commands = []
event_users = []
conversation_handler = None

NAME, DESCRIPTION, LOCATION, TAG, START_DATE, END_DATE, CONFIRM = range(7)

def init(DEV_CHAT, EVENT_USERS, ORDINARY_COMMANDS, FORM_COMMANDS):
    global dev_chat_id, forms, form_commands, ordinary_commands, event_users
    dev_chat_id=DEV_CHAT
    ordinary_commands=ORDINARY_COMMANDS
    form_commands=FORM_COMMANDS
    event_users=EVENT_USERS
    conv_handler = ConversationHandler(
        entry_points=[(CommandHandler("addevent", new_event))],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, location)],
            TAG: [MessageHandler(filters.TEXT & ~filters.COMMAND, tag)],
            START_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, start_date)],
            END_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, end_date)],
            CONFIRM: [CallbackQueryHandler(confirm)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    return conv_handler


def is_valid_date(date_string: str) -> bool:
    try:
        date = datetime.strptime(date_string, "%H:%M %d.%m.%Y")
        if date >= datetime.now():
            return True
        else:
            return False
    except ValueError:
        return False


def is_past_date(first_date: str, second_date: str) -> bool:
    try:
        date1 = datetime.strptime(first_date, "%H:%M %d.%m.%Y")
        date2 = datetime.strptime(second_date, "%H:%M %d.%m.%Y")
        if date2 > date1:
            return True
        else:
            return False
    except ValueError:
        return False


async def new_event(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if ("@"+update.message.from_user.username) in event_users:
        await context.bot.set_my_commands(form_commands,scope=telegram.BotCommandScopeChat(update.message.chat_id))
        context.user_data['index']=1
        await update.message.reply_text("–î–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∏–∂—á–µ(–¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –≤–≤–µ–¥–∏ /cancel).")
        await update.message.reply_text(f"{context.user_data.get('index')}. –ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó, —è–∫—É —Ç–∏ —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏.")
        return NAME
    else:
        await update.message.reply_text(text="–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π!")
        return ConversationHandler.END


async def name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    index = context.user_data.get('index')
    context.user_data['index'] = index+1
    await update.message.reply_text(f"{context.user_data.get('index')}. –ù–∞–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ø–æ–¥—ñ—ó(–∫—ñ–ª—å–∫–∞ —Ä–µ—á–µ–Ω—å).")
    return DESCRIPTION


async def description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['description'] = update.message.text
    index = context.user_data.get('index')
    context.user_data['index'] = index + 1
    await update.message.reply_text(f"{context.user_data.get('index')}. –ù–∞–∑–≤–∞ –ª–æ–∫–∞—Ü—ñ—ó, –≤ —è–∫—ñ–π –≤—ñ–¥–±—É–≤–∞—Ç–∏–º–µ—Ç—å—Å—è –ø–æ–¥—ñ—è.")
    return LOCATION


async def location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['location'] = update.message.text
    index = context.user_data.get('index')
    context.user_data['index'] = index + 1
    await update.message.reply_text(f"{context.user_data.get('index')}. –ù–∞–¥–∞–π —Ç–µ–≥ –¥–ª—è –ø–æ–¥—ñ—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ #—Ç–µ–≥.")
    return TAG


async def tag(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if re.match(r"^#\w+$", update.message.text):
        context.user_data['tag'] = update.message.text
    else:
        await update.message.reply_text(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –í–≤–µ–¥–∏ —â–µ —Ä–∞–∑, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return TAG
    index = context.user_data.get('index')
    context.user_data['index'] = index + 1
    await update.message.reply_text(f"{context.user_data.get('index')}. –î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø–æ—á–∞—Ç–∫—É –ø–æ–¥—ñ—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ  –≥–≥:—Ö—Ö –¥–¥.–º–º.—Ä—Ä—Ä—Ä.")
    return START_DATE


async def start_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if (is_valid_date(update.message.text)):
        context.user_data['start_date_buffer'] = update.message.text
        index = context.user_data.get('index')
        context.user_data['index'] = index + 1
        await update.message.reply_text(f"{context.user_data.get('index')}. –î–∞—Ç–∞ —Ç–∞ —á–∞—Å –∫—ñ–Ω—Ü—è –ø–æ–¥—ñ—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ  –≥–≥:—Ö—Ö –¥–¥.–º–º.—Ä—Ä—Ä—Ä.")
        return END_DATE
    else:
        await update.message.reply_text(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–±–æ –≤–≤–µ–¥–µ–Ω–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å, —è–∫—ñ –≤–∂–µ –º–∏–Ω—É–ª–∏/–Ω–µ —î –º–æ–∂–ª–∏–≤–∏–º–∏. –í–≤–µ–¥–∏ —â–µ —Ä–∞–∑, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return START_DATE


async def end_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if (is_valid_date(update.message.text) and is_past_date(context.user_data.get('start_date_buffer'),update.message.text)):
        context.user_data['end_date'] = update.message.text.replace(" "," - ")
        context.user_data['start_date'] =  context.user_data.get('start_date_buffer').replace(" "," - ")
        index = context.user_data.get('index')
        context.user_data['index'] = index + 1
        keyboard = [
            [InlineKeyboardButton("–í—Å–µ –≤—ñ—Ä–Ω–æ, –¥–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é", callback_data="Yes")],
            [InlineKeyboardButton("–ù—ñ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏", callback_data="No")],
        ]

        report_message = (
            f"*–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó:* {context.user_data.get('name')}\n"
            f"*–û–ø–∏—Å:* {context.user_data.get('description')}\n"
            f"*–õ–æ–∫–∞—Ü—ñ—è:* {context.user_data.get('location')}\n"
            f"*–¢–µ–≥:* {context.user_data.get('tag')}\n"
            f"*–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É:* {context.user_data.get('start_date')}\n"
            f"*–î–∞—Ç–∞ –∫—ñ–Ω—Ü—è:* {context.user_data.get('end_date')}\n"
        )
        context.user_data['username'] = str("@"+update.message.from_user.username if update.message.from_user.username else (update.message.from_user.first_name + " " + update.message.from_user.last_name)).replace("_","\_")
        context.user_data['report'] = report_message
        await update.message.reply_text(
            f"–î—è–∫—É—é! –í–≤–µ–¥–µ–Ω—ñ —Ç–æ–±–æ—é –¥–∞–Ω—ñ:\n{report_message}",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return CONFIRM
    else:
        await update.message.reply_text(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–±–æ –≤–≤–µ–¥–µ–Ω–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å, —è–∫—ñ –≤–∂–µ –º–∏–Ω—É–ª–∏/—Ä–∞–Ω—ñ—à—ñ –∑–∞ –¥–∞—Ç—É —Ç–∞ —á–∞—Å –ø–æ—á–∞—Ç–∫—É –∞–±–æ –Ω–µ —î –º–æ–∂–ª–∏–≤–∏–º–∏. –í–≤–µ–¥–∏ —â–µ —Ä–∞–∑, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return END_DATE


async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    none_keyboard=""
    if(query.data=="Yes"):
        none_keyboard = [
            [InlineKeyboardButton("üîò –í—Å–µ –≤—ñ—Ä–Ω–æ, –¥–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é üîò ", callback_data="none")],
        ]
    elif(query.data=="No"):
        none_keyboard = [
            [InlineKeyboardButton("üîò –ù—ñ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ üîò ", callback_data="none")],
        ]
    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(none_keyboard))
    while (query.data == "none"):
        query = update.callback_query
        await query.answer()
    if (query.data == "Yes"):
        form = await context.bot.send_message(chat_id=dev_chat_id,text=f"–ù–æ–≤–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ —Ñ–æ—Ä–º–∞!!!")
        await context.bot.edit_message_text(chat_id=dev_chat_id,message_id=form.message_id,text=f"üìÖ –ù–æ–≤–∞ –¥–æ–¥–∞–Ω–∞ –ø–æ–¥—ñ—è –≤—ñ–¥ {context.user_data.get('username')}:\n*ID —Ñ–æ—Ä–º–∏*: #T{query.message.chat.id}{((form.message_id) + 1)}\n{context.user_data.get('report')}",parse_mode="Markdown")
        new_event = {
            "title": context.user_data.get('name'),
            "shortDescription": context.user_data.get('description'),
            "location": context.user_data.get('location'),
            "tag": context.user_data.get('tag'),
            "startDate": datetime.strptime(context.user_data.get('start_date'), "%H:%M - %d.%m.%Y").isoformat()+"Z",
            "endDate": datetime.strptime(context.user_data.get('end_date'), "%H:%M - %d.%m.%Y").isoformat()+"Z"
        }
        SWG.create_event(new_event)
        context.user_data.clear()
        await context.bot.set_my_commands(ordinary_commands, scope=telegram.BotCommandScopeChat(query.message.chat.id))
        return ConversationHandler.END
    elif (query.data == "No"):
        context.user_data.clear()
        context.user_data['index'] = 1
        await query.message.reply_text(f"{context.user_data.get('index')}. –ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó, —è–∫—É —Ç–∏ —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏.")
        return NAME


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ!")
    await context.bot.set_my_commands(ordinary_commands,scope=telegram.BotCommandScopeChat(update.message.chat_id))
    return ConversationHandler.END