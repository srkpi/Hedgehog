import re  # For parsing input text
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler, ConversationHandler
import time
from datetime import datetime, timedelta
import mongo_DB_ui as MNG

dev_chat_id = 0
forms = {}
form_commands = []
ordinary_commands = []
conversation_handler = None

USERNAME, FULL_NAME, JUST_NAME, GROUP, FACULTY, REGULARITY, DEPARTMENTS, BIRTH, EXPERIENCE, MOTIVATION, ACCEPT, CONFIRM = range(12)

def init(DEV_CHAT, FORMS, ORDINARY_COMMANDS, FORM_COMMANDS):
    global dev_chat_id, forms, form_commands, ordinary_commands
    dev_chat_id=DEV_CHAT
    forms=FORMS
    ordinary_commands=ORDINARY_COMMANDS
    form_commands=FORM_COMMANDS
    conv_handler = ConversationHandler(
        entry_points=[(CommandHandler("join", join))],
        states={
            USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, username)],
            FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, full_name)],
            JUST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, just_name)],
            FACULTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, faculty)],
            GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, group)],
            REGULARITY: [CallbackQueryHandler(regularity)],
            DEPARTMENTS: [CallbackQueryHandler(departments_choice)],
            BIRTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, birth_date)],
            EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, experience)],
            MOTIVATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, motivation)],
            ACCEPT: [CallbackQueryHandler(acceptance)],
            CONFIRM: [CallbackQueryHandler(confirm)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    return conv_handler

def is_valid_date(date_string: str) -> bool:
    try:
        date = datetime.strptime(date_string, "%d.%m.%Y")
        if datetime(1900, 1, 1) <= date <= (datetime.now() - timedelta(days=14 * 365)):
            return True
        else:
            return False
    except ValueError:
        return False


async def join(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await context.bot.set_my_commands(form_commands,scope=telegram.BotCommandScopeChat(update.message.chat_id))
    context.user_data['index']=1
    await update.message.reply_text(
        "–î–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∏–∂—á–µ(–¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –≤–≤–µ–¥–∏ /cancel).")
    username = update.message.from_user.username if update.message.from_user.username else ""
    if(username==""):
        await update.message.reply_text(f"{context.user_data.get('index')}. –¢–≤—ñ–π telegram username. –£ —Ñ–æ—Ä–º–∞—Ç—ñ @my_username.")
        return USERNAME
    else:
        context.user_data['username'] = (f"@{username}").replace("_","\_")
        await update.message.reply_text(f"{context.user_data.get('index')}. –ü–Ü–ë(–ø–æ–≤–Ω—ñ—Å—Ç—é –±–µ–∑ —Å–∫–æ—Ä–æ—á–µ–Ω—å):")
        #return FULL_NAME
        return MOTIVATION


async def username(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['username'] = update.message.text.replace("_","\_")
    index = context.user_data.get('index')
    context.user_data['index'] = index+1
    await update.message.reply_text(f"{context.user_data.get('index')}. –Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?")
    return FULL_NAME


async def full_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    pattern = r'^[\u0400-\u04FF\s]+$'
    if not re.match(pattern, update.message.text):
        await update.message.reply_text("–¶–µ –ø–æ–ª–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∞–±–µ—Ç–∫–∏. –í–≤–µ–¥–∏ —â–µ —Ä–∞–∑, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return FULL_NAME
    else:
        context.user_data['full_name'] = update.message.text
        index = context.user_data.get('index')
        context.user_data['index'] = index + 1
        await update.message.reply_text(f"{context.user_data.get('index')}. –Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?")
        return JUST_NAME


async def just_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['just_name'] = update.message.text
    index = context.user_data.get('index')
    context.user_data['index'] = index + 1
    await update.message.reply_text(f"{context.user_data.get('index')}. –ê–±—Ä–µ–≤—ñ–∞—Ç—É—Ä–∞ —Ç–≤–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É/—ñ–Ω—Å—Ç–∏—Ç—É—Ç—É? –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ –ê–ë–í.")
    return FACULTY


async def faculty(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    pattern = r'^[\u0400-\u04FF]+$'
    if not re.match(pattern, update.message.text):
        await update.message.reply_text("–¶–µ –ø–æ–ª–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∞–±–µ—Ç–∫–∏ –±–µ–∑ —Ä–æ–∑–¥—ñ–ª–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤. –í–≤–µ–¥–∏ —â–µ —Ä–∞–∑, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return FACULTY
    else:
        context.user_data['faculty'] = update.message.text
        index = context.user_data.get('index')
        context.user_data['index'] = index + 1
        await update.message.reply_text(f"{context.user_data.get('index')}. –®–∏—Ñ—Ä —Ç–≤–æ—î—ó –≥—Ä—É–ø–∏? –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ –•–•-00.")
        return GROUP


async def group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    pattern = r'^[\u0400-\u04FF]{2}-\d{2}$'
    if not re.match(pattern, update.message.text):
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –í–≤–µ–¥–∏ —â–µ —Ä–∞–∑, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return GROUP
    else:
        context.user_data['group'] = update.message.text
        keyboard = [
            [InlineKeyboardButton("–õ–µ–≥–∫–æ –º–æ–∂—É –ø—Ä–∏—ó—Ö–∞—Ç–∏ –Ω–∞ –ö–ü–Ü –∞–±–æ —á–∞—Å—Ç–æ —Ç–∞–º –±—É–≤–∞—é", callback_data="–¢–∞–∫, –º–æ–∂—É —á–∞—Å—Ç–æ")],
            [InlineKeyboardButton("–ù–µ —á–∞—Å—Ç–æ –∑–º–æ–∂—É –±—É—Ç–∏ –Ω–∞ –ö–ü–Ü", callback_data="–ó–º–æ–∂—É, –∞–ª–µ –Ω–µ —á–∞—Å—Ç–æ")],
            [InlineKeyboardButton("–ü—Ä–∞—Ü—é–≤–∞—Ç–∏–º—É –ª–∏—à–µ –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π–Ω–æ", callback_data="–õ–∏—à–µ –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π–Ω–æ")],
        ]
        index = context.user_data.get('index')
        context.user_data['index'] = index + 1
        await update.message.reply_text(f"{context.user_data.get('index')}. –Ø–∫ —á–∞—Å—Ç–æ —Ç–∏ –±—É–≤–∞—î—à –Ω–∞ –ö–ü–Ü? –†–æ–∑—É–º—ñ—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞—Ö–æ–¥—ñ–≤.", reply_markup=InlineKeyboardMarkup(keyboard))
        return REGULARITY


async def regularity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    departments = [
        ("–Ü–¢-—Å–ª—É–∂–±–∞", "–Ü–¢-—Å–ª—É–∂–±–∞"),
        ("–°–ª—É–∂–±–∞ –≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–æ—ó —Ä–æ–±–æ—Ç–∏", "–°–ª—É–∂–±–∞ –≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–æ—ó —Ä–æ–±–æ—Ç–∏"),
        ("–°–ª—É–∂–±–∞ —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏—Ö –æ–±‚Äô—î–¥–Ω–∞–Ω—å", "–°–ª—É–∂–±–∞ —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏—Ö –æ–±‚Äô—î–¥–Ω–∞–Ω—å"),
        ("–°–ª—É–∂–±–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –∑–≤‚Äô—è–∑–∫—ñ–≤", "–°–ª—É–∂–±–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –∑–≤‚Äô—è–∑–∫—ñ–≤"),
        ("–°–ª—É–∂–±–∞ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–≤‚Äô—è–∑–∫—ñ–≤", "–°–ª—É–∂–±–∞ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–≤‚Äô—è–∑–∫—ñ–≤"),
        ("–°–µ–∫—Ä–µ—Ç–∞—Ä—ñ–∞—Ç", "–°–µ–∫—Ä–µ—Ç–∞—Ä—ñ–∞—Ç"),
        ("–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –º–µ–¥—ñ–∞", "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –º–µ–¥—ñ–∞"),
        ("–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ—Ñ–æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—ó", "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø—Ä–æ—Ñ–æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—ó"),
        ("–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏", "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏"),
        ("–ü—Ä–æ—î–∫—Ç–Ω–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç", "–ü—Ä–æ—î–∫—Ç–Ω–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç")
    ]
    query = update.callback_query
    await query.answer()
    context.user_data['regularity'] = query.data
    context.user_data['departments'] = departments
    context.user_data['choice1'] = "0"
    if(query.data=="–¢–∞–∫, –º–æ–∂—É —á–∞—Å—Ç–æ"):
        none_keyboard = [
            [InlineKeyboardButton("üîò –¢–∞–∫, –º–æ–∂—É —á–∞—Å—Ç–æ üîò ", callback_data="none")],
        ]
    elif(query.data=="–ó–º–æ–∂—É, –∞–ª–µ –Ω–µ —á–∞—Å—Ç–æ"):
        none_keyboard = [
            [InlineKeyboardButton("üîò –ó–º–æ–∂—É, –∞–ª–µ –Ω–µ —á–∞—Å—Ç–æ üîò ", callback_data="none")],
        ]
    elif(query.data=="–õ–∏—à–µ –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π–Ω–æ"):
        none_keyboard = [
            [InlineKeyboardButton("üîò –õ–∏—à–µ –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π–Ω–æ üîò ", callback_data="none")],
        ]
    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(none_keyboard))
    keyboard = [[InlineKeyboardButton(text, callback_data=callback)] for text, callback in departments]
    index = context.user_data.get('index')
    context.user_data['index'] = index + 1
    await query.message.reply_text(f"{context.user_data.get('index')}. –ü—Ä–æ—á–∏—Ç–∞–π [—Å—Ç–∞—Ç—Ç—é](https://www.hashtap.com/@sr\\_kpi/%D1%81%D1%82%D1%83%D0%B4%D0%B5%D0%BD%D1%82%D1%81%D1%8C%D0%BA%D0%B0-%D1%80%D0%B0%D0%B4%D0%B0-%D0%BA%D0%BF%D1%96-Zdg3640XZLl6) –ø—Ä–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∏ –°—Ç—É–¥—Ä–∞–¥–∏ –ö–ü–Ü.\n"
                                   "–û–±–µ—Ä–∏ –Ω–µ –±—ñ–ª—å—à–µ 2 –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ñ–≤/—Å–ª—É–∂–± –Ω–∏–∂—á–µ.",reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    return DEPARTMENTS


async def departments_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    departments = context.user_data.get('departments')
    if(query.data=="none"):
        return DEPARTMENTS
    else:
        if(context.user_data.get('choice1')=="0"):
            new_button = ("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä‚û°Ô∏è","11")
            context.user_data['choice1'] = query.data
            for i, (name, id) in enumerate(departments):
                if name == query.data:
                    departments[i] = (f"üîò {query.data} üîò ","none")
                    break
            departments.append(new_button)
            context.user_data['departments'] = departments
            keyboard = [[InlineKeyboardButton(text, callback_data=callback)] for text, callback in departments]
            await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
            return DEPARTMENTS
        else:
            if(query.data=="11"):
                context.user_data['choice2'] = " "
                buff_choice = context.user_data.get('choice1')
                no_delete_item = (f"üîò {buff_choice} üîò ","none")
                departments = [item for item in departments if item == no_delete_item]
                keyboard = [[InlineKeyboardButton(text, callback_data=callback)] for text, callback in departments]
                await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                context.user_data['choice2'] = f", {query.data}"
                for i, (name, id) in enumerate(departments):
                    if name == query.data:
                        departments[i] = (f"üîò {query.data} üîò ", "none")
                        break
                buff_choice = context.user_data.get('choice1')
                no_delete_items = [(f"üîò {buff_choice} üîò ", "none"),(f"üîò {query.data} üîò ", "none")]
                departments = [item for item in departments if item in no_delete_items]
                keyboard = [[InlineKeyboardButton(text, callback_data=callback)] for text, callback in departments]
                await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
    index = context.user_data.get('index')
    context.user_data['index'] = index + 1
    await query.message.reply_text(f"{context.user_data.get('index')}. –¢–≤–æ—è –¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è? –§–æ—Ä–º–∞—Ç –¥–¥.–º–º.—Ä—Ä—Ä—Ä.")
    return BIRTH


async def birth_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if(is_valid_date(update.message.text)):
        context.user_data['birthdate'] = update.message.text
        index = context.user_data.get('index')
        context.user_data['index'] = index + 1
        await update.message.reply_text(f"{context.user_data.get('index')}. –ß–∏ –±—É–≤ —É —Ç–µ–±–µ –¥–æ—Å–≤—ñ–¥ —É –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤—ñ —Ä–∞–Ω—ñ—à–µ?\n–†–æ–∑–∫–∞–∂–∏ —Ç—É—Ç –ø—Ä–æ –±—É–¥—å-—è–∫–∏–π –í–∞—à –¥–æ—Å–≤—ñ–¥ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞ —Ç–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–µ–∫—Ç—ñ–≤.")
        return EXPERIENCE
    else:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–±–æ –≤–≤–µ–¥–µ–Ω–æ –¥–∞—Ç—É, —â–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ª–æ–≥—ñ—á–Ω–∏–º –º–µ–∂–∞–º –¥–ª—è –≤—ñ–∫—É. –í–≤–µ–¥–∏ —â–µ —Ä–∞–∑, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return BIRTH


async def experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['experience'] = update.message.text
    index = context.user_data.get('index')
    context.user_data['index'] = index + 1
    await update.message.reply_text(
        f"{context.user_data.get('index')}. –¢–≤–æ—è –º–æ—Ç–∏–≤–∞—Ü—ñ—è –±—É—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ –°—Ç—É–¥—Ä–∞–¥–∏ –ö–ü–Ü."
        " –ù–∞–ø–∏—à—ñ—Ç—å, —á–æ–º—É —Ö–æ—á–µ—à –¥–æ—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –°—Ç—É–¥—Ä–∞–¥–∏.\n–ë—É–¥—å –ª–∞—Å–∫–∞, —Ä–æ–∑–ø–∏—à–∏ –∫—ñ–ª—å–∫–æ–º–∞ —Ä–µ—á–µ–Ω–Ω—è–º–∏.")
    return MOTIVATION


async def motivation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['motivation'] = update.message.text
    keyboard = [
        [InlineKeyboardButton("–¢–∞–∫, –¥–∞—é —Å–≤–æ—é –∑–≥–æ–¥—É‚úÖ", callback_data="approve")],
        [InlineKeyboardButton("–ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏‚ùå", callback_data="cancel")],
    ]
    index = context.user_data.get('index')
    context.user_data['index'] = index + 1
    await update.message.reply_text(f"{context.user_data.get('index')}. –î–∞—î—à —Å–≤–æ—é –∑–≥–æ–¥—É –Ω–∞ –æ–±—Ä–æ–±–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö?",reply_markup=InlineKeyboardMarkup(keyboard))
    return ACCEPT


async def acceptance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if (query.data == "none"):
        return ACCEPT
    else:
        if(query.data=="approve"):
            keyboard = [[InlineKeyboardButton("üîò –¢–∞–∫, –¥–∞—é —Å–≤–æ—é –∑–≥–æ–¥—É‚úÖ üîò ", callback_data="none")]]
            await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
            keyboard = [
                [InlineKeyboardButton("–í—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="Yes")],
                [InlineKeyboardButton("–ù—ñ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏", callback_data="No")],
            ]
            report_message = (
                              f"*Username:* {context.user_data.get('username')}\n"
                              f"*–ü–Ü–ë:* {context.user_data.get('full_name')}\n"
                              f"*–ó–≤–µ—Ä—Ç–∞—Ç–∏—Å—å:* {context.user_data.get('just_name')}\n"
                              f"*–§–∞–∫—É–ª—å—Ç–µ—Ç/—ñ–Ω—Å—Ç–∏—Ç—É—Ç:* {context.user_data.get('faculty')}\n"
                              f"*–®–∏—Ñ—Ä –≥—Ä—É–ø–∏:* {context.user_data.get('group')}\n"
                              f"*–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–¥–≤—ñ–¥—É–≤–∞—Ç–∏ –ö–ü–Ü:* {context.user_data.get('regularity')}\n"
                              f"*–û–±—Ä–∞–Ω—ñ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏/—Å–ª—É–∂–±–∏:* {context.user_data.get('choice1')}{context.user_data.get('choice2')}\n"
                              f"*–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:* {context.user_data.get('birthdate')}\n"
                              f"*–î–æ—Å–≤—ñ–¥:* {context.user_data.get('experience')}\n"
                              f"*–ú–æ—Ç–∏–≤–∞—Ü—ñ—è:* {context.user_data.get('motivation')}\n")
            context.user_data['report'] = report_message
            await query.message.reply_text(
                f"–î—è–∫—É—é! –í–≤–µ–¥–µ–Ω—ñ —Ç–æ–±–æ—é –¥–∞–Ω—ñ:\n{report_message}",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(keyboard))
        elif(query.data=="cancel"):
            await query.get_bot().set_my_commands(ordinary_commands,scope=telegram.BotCommandScopeChat(query.message.chat_id))
            keyboard = [[InlineKeyboardButton("üîò –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏‚ùå üîò ", callback_data="none")]]
            await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
            await query.message.reply_text("–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ!\n–Ø–∫ –∑–º—ñ–Ω–∏—à —Å–≤–æ—î —Ä—ñ—à–µ–Ω–Ω—è, —Ç–æ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—à –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Ü—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É.")
            return ConversationHandler.END
    return CONFIRM


async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    none_keyboard=""
    if(query.data=="Yes"):
        none_keyboard = [
            [InlineKeyboardButton("üîò –í—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ üîò ", callback_data="none")],
        ]
    elif(query.data=="No"):
        none_keyboard = [
            [InlineKeyboardButton("üîò –ù—ñ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ üîò ", callback_data="none")],
        ]
    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(none_keyboard))
    while (query.data == "none"):
        query = update.callback_query
        await query.answer()
    if (query.data == "Yes"):
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–∏–π–Ω—è—Ç–∏ ‚úÖ ",callback_data="good"), InlineKeyboardButton("–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ ‚ùå ", callback_data="bad")]
        ]
        form = await context.bot.send_message(chat_id=dev_chat_id,text=f"–ù–æ–≤–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ —Ñ–æ—Ä–º–∞!!!")
        await context.bot.edit_message_text(chat_id=dev_chat_id,message_id=form.message_id,text=f"üìã –ù–æ–≤–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ —Ñ–æ—Ä–º–∞:\n*ID —Ñ–æ—Ä–º–∏*: #T{query.message.chat.id}{((form.message_id) + 1)}\n{context.user_data.get('report')}",parse_mode="Markdown",reply_markup=InlineKeyboardMarkup(keyboard))
        forms[int(form.message_id)]=(int(query.message.chat.id), int(query.message.message_id), 0)
        values = forms.get(int(form.message_id))
        MNG.insert_one_dictionary_item(int(form.message_id), values, "Join_forms")
        context.user_data.clear()
        await context.bot.set_my_commands(ordinary_commands, scope=telegram.BotCommandScopeChat(query.message.chat.id))
        return ConversationHandler.END
    elif (query.data == "No"):
        context.user_data.clear()
        context.user_data['index'] = 1
        await query.message.reply_text(f"{context.user_data.get('index')}. –ü–Ü–ë(–ø–æ–≤–Ω—ñ—Å—Ç—é –±–µ–∑ —Å–∫–æ—Ä–æ—á–µ–Ω—å):")
        return FULL_NAME


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ!")
    await context.bot.set_my_commands(ordinary_commands,scope=telegram.BotCommandScopeChat(update.message.chat_id))
    return ConversationHandler.END